name: Deploy para AWS ECR e EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: 🏗️ Build & Push para ECR
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 🔑 Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔐 Login no Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      - name: 🏗️ Build da Imagem Docker
        run: |
          docker build -t meu-app .
          docker tag meu-app ${{ secrets.AWS_ECR_REPOSITORY }}:latest

      - name: 🚀 Enviar Imagem para o ECR
        run: docker push ${{ secrets.AWS_ECR_REPOSITORY }}:latest

  deploy:
    name: 🚀 Deploy no EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: 📥 Checkout do Código
        uses: actions/checkout@v4

      - name: 🔑 Configurar Acesso SSH no EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: 📦 Baixar e Executar a Imagem no EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
            docker pull ${{ secrets.AWS_ECR_REPOSITORY }}:latest
            docker stop meu-app || true
            docker rm meu-app || true
            docker run -d --name meu-app -p 80:80 ${{ secrets.AWS_ECR_REPOSITORY }}:latest
          EOF
